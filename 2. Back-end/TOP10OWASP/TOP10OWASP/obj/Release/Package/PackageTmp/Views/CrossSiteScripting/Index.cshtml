@{ 
    ViewBag.title = "Cross-Site Scripting (XSS)";
}
<div class="row">
    <div class="col-12">
        <div class="tab">
            <div class="d-flex align-items-center justify-content-between w-100">
                <div class="page-number h2">
                    <span class="number">3.</span> Cross Site Scripting
                </div>
                <a href="/">Back to index</a>
            </div>

            <div id="smartwizard">
                <ul class="nav">
                    <li>
                        <a class="nav-link" href="#step-1">
                            Tìm hiểu về Cross Site scripting XSS
                        </a>
                    </li>
                    <li>
                        <a class="nav-link" href="#step-2"> Hướng giải quyết </a>
                    </li>
                    <li>
                        <a class="nav-link" href="#step-3"> Demo sau khi ngăn lỗi </a>
                    </li>
                </ul>

                <div class="tab-content">
                    <div id="step-1" class="tab-pane" role="tabpanel">
                        <div class="content">
                            <p>
                                Cross Site Scripting (XSS) là gì ? Là một kiểu tấn công
                                cho phép hacker chèn vào những đoạn script độc hại (thông
                                thường là javascript hoặc HTML) vào website và sẽ được
                                thực thi ở trình duyệt người dùng.
                            </p>
                            <p>
                                Các thông tin có thể bị đánh cắp qua XSS: Email, Mật khẩu,
                                Cookie truy cập web nào đó của người dùng.
                            </p>
                            <p>Mục đích tấn công XSS:</p>
                            <ul class="list-unstyled pl-5">
                                <li>
                                    <p>
                                        <strong>Cookie</strong> : Hacker có thể lấy được
                                        cookie của người dùng và dùng thông tin trong cookie
                                        để giả mạo phiên truy cập.
                                    </p>
                                </li>
                                <li>
                                    <p>
                                        <strong>Keylogging</strong> : Hacker có thể ghi lại
                                        những thao tác gõ phím của người dùng bắng cách sử
                                        dụng sự kiện addEventListenner trong javascript sau đó
                                        sẽ phân tích dữ liệu đó và tìm ra các mật khẩu hay mã
                                        ngân hàng.
                                    </p>
                                </li>
                                <li>
                                    <p>
                                        <strong>Phishing</strong> : Hacker có thể thay đổi
                                        giao diện website bằng cách thay đổi cấu trúc
                                        HTMLtrong trang web để đánh lừa người dùng, khi đó
                                        chúng có thể tạo các forrm đăng nhập giả để lấy mật
                                        khẩu.
                                    </p>
                                </li>
                            </ul>
                            <p>hình thức tấn công có 3 dạng: </p>
                            <ol class="ml-5">
                                <li>XSS reflected: kẻ tấn công gửi một link giả mạo trực tiếp đến người dùng và lừa họ click vào đó. Người dùng không hề hay biết hắn đã đánh cắp được cookie, session của họ.</li>
                                <li>Store XSS: kẻ tấn công chèn trực tiếp mã độc vào database nhằm mục đích Spam (gây làm phiền). Mỗi khi người dùng mở website lên thì đoạn mã độc đó sẽ được thực thi.</li>
                                <li>DOM based XSS: kẻ tấn công thay đổi cấu trúc trang web, thay vì chúng ta thực hiện chức năng đăng nhập vào hệ thống thì chúng ta đang gửi chính tài khoản, mật khẩu đến họ. Dẫn đến lộ thông tin tài khoản và chúng ta không hề hay biết họ sẽ phá hoại những thông tin gì trong tài khoản đó.</li>
                            </ol>
                            <p>
                                Giả sử, website chúng ta đang thực hiện việc gửi 1 message
                                cho user bất kỳ.
                            </p>
                            <p>
                                Hãy thực hiện việc đó với việc chèn đoạn script bên dưới
                                vào form hoặc click vào đoạn script sau đó ấn Gửi
                            </p>
                            <pre>
                            <code class="html cursor-pointer" onclick="handleClickGetText(this)">
                &lt;script&gt;alert('hacked!!');&lt;/script&gt;
                        </code>
                    </pre>
                        </div>
                        <div class="demo d-flex">
                            <div class="form-group">
                                @using (Html.BeginForm("xss", "CrossSiteScripting", FormMethod.Post, new {@id = "form-error" }))
                                {
                                <textarea class="form-control font-small mb-3"
                                          placeholder="Nhập vào tin nhắn cần gửi"
                                          name="message"
                                          rows="4"
                                          cols="50"
                                          id="notValidate"></textarea>
                                <button type="submit"
                                        id="btn-submit-error"
                                        class="btn btn-primary btn-sm px-3 py-1">                                         
                                    
                                    Gửi
                                </button>
                                }


                            </div>
                        </div>
                    </div>
                    <div id="step-2" class="tab-pane" role="tabpanel">
                        <ol class="ml-5">
                            <li>
                                <p>
                                    Sử dụng Regex để Validate Trực tiếp tại phía Client bằng
                                    Javascript
                                </p>
                            </li>   
                            <li>
                                <p>
                                    Không trả về kết quả là HTML, hoặc với đầu vào là HTML, ta chỉ việc mã hóa các ký tự đặc biệt cho thẻ HTML ví dụ như
                                    <pre>
                                        <code class="HTML">
        &lt;script&gt;alert(1)&lt;/script&gt; thành  @Html.Encode("<script>alert(1)</script>")
                                        </code>
                                    </pre>
                                </p>
                            </li>
                            <li>XSS còn có thể được sử dụng để tấn công để khai thác các lỗ hỏng khác trong hệ thống của bạn để buộc nó phải hiển thị Exception nếu các nơi có trường nhập dữ liệu không validate tại cả 2 phía Front - end và Back - end.</li>
                        </ol>
                                            
                       
                        
                        

                    </div>
                    <div id="step-3" class="tab-pane" role="tabpanel">
                        <div id="step-1" class="tab-pane" role="tabpanel">
                            <div class="content">
                                <p>
                                    Sau khi ràng buộc dữ liệu thành công, hãy thử nhập vào
                                    tin nhắn bất kỳ và một đoạn script như phía ví dụ
                                </p>
                                <pre>
                                <code class="html cursor-pointer" onclick="handleClickGetText2(this)">
                &lt;script&gt;alert('hacked!!');&lt;/script&gt;
                        </code>
                    </pre>
                            </div>
                            <div class="demo d-flex">
                                <div class="form-group">
                                    @using (Html.BeginForm("xssOwasp", "CrossSiteScripting", FormMethod.Post, new { @onsubmit = "return(handleValidate());", @id = "formOwasp" }))
                                    {
                                        <textarea class="form-control font-small mb-3"
                                                  placeholder="Nhập vào tin nhắn cần gửi"
                                                  rows="4"
                                                  cols="50"
                                                  name="message"
                                                  id="validate"
                                                  required></textarea>
                                        <p class="errorText text-danger pl-2 alert-danger"></p>
                                        <button type="submit"
                                                class="btn btn-primary btn-sm px-3 py-1"
                                                id="btn-submit">
                                            Gửi
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        function handleClickGetText(e) {
            const textArea = document.querySelector("#notValidate");
            textArea.innerText = e.innerText;
        }

        function handleClickGetText2(e) {
            const textArea = document.querySelector("#validate");
            textArea.innerText = e.innerText;
        }

        const regex = "<(|\/|[^\/>][^>]+|\/[^>][^>]+)>";
        const handleValidate = () => {
            let message = document.querySelector("#validate");
            let error = document.querySelector(".errorText");
            if (message.value == "") {
                error.innerText = "Tin nhắn không được để trống";
                message.classList.add("error");
                message.focus();
                return false;
            }
            if (message.value.match(regex)) {
                error.innerText = "Tin nhắn nhập vào không hợp lệ!!";
                message.classList.add("error");
                message.focus();
                return false;
            }
            return true;
        };
    </script>
}